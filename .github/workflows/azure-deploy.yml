name: Deploy ARM Template

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Generate SSH Key (if not exists)
        run: |
          mkdir -p ~/.ssh
          if [ ! -f ~/.ssh/id_rsa ]; then
            ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa -N "" -C "github-actions"
          fi
          echo "SSH_PUBLIC_KEY=$(cat ~/.ssh/id_rsa.pub)" >> $GITHUB_ENV

      - name: Inject SSH Key into Parameters File
        run: |
          jq --arg key "$SSH_PUBLIC_KEY" '.parameters.adminPasswordOrKey.value = $key' templates/azuredeploy.parameters.json > temp.json
          mv temp.json templates/azuredeploy.parameters.json

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create Resource Group (if not exists)
        run: |
          az group create --name my-linux-vm-rr3 --location "Central US"

      - name: Deploy ARM Template
        id: deploy_vm  # <-- Assign an ID to use its outputs later
        uses: azure/arm-deploy@v1
        with:
          scope: resourcegroup
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          resourceGroupName: my-linux-vm-rr3
          template: templates/azuredeploy.json
          parameters: templates/azuredeploy.parameters.json
          deploymentMode: Incremental

      - name: Upload SSH Private Key as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ssh-private-key
          path: ~/.ssh/id_rsa
          if-no-files-found: error

      - name: Print ARM Outputs
        run: |
          echo "Admin Username: ${{ steps.deploy_vm.outputs.adminUsername }}"
          echo "Hostname (FQDN): ${{ steps.deploy_vm.outputs.hostname }}"
          echo "SSH Command: ${{ steps.deploy_vm.outputs.sshCommand }}"

      - name: Store Outputs in Environment
        run: |
          echo "ADMIN_USERNAME=${{ steps.deploy_vm.outputs.adminUsername }}" >> $GITHUB_ENV
          echo "HOSTNAME=${{ steps.deploy_vm.outputs.hostname }}" >> $GITHUB_ENV
          echo "SSH_COMMAND=${{ steps.deploy_vm.outputs.sshCommand }}" >> $GITHUB_ENV

      - name: Use Outputs in Next Steps
        run: echo "Connect using:${{ env.SSH_COMMAND }}"
